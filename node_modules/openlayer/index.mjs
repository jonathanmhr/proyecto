// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as qs from "./internal/qs/index.mjs";
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Commits } from "./resources/commits/commits.mjs";
import { InferencePipelines, } from "./resources/inference-pipelines/inference-pipelines.mjs";
import { Projects, } from "./resources/projects/projects.mjs";
import { Storage } from "./resources/storage/storage.mjs";
/**
 * API Client for interfacing with the Openlayer API.
 */
export class Openlayer extends Core.APIClient {
    /**
     * API Client for interfacing with the Openlayer API.
     *
     * @param {string | null | undefined} [opts.apiKey=process.env['OPENLAYER_API_KEY'] ?? null]
     * @param {string} [opts.baseURL=process.env['OPENLAYER_BASE_URL'] ?? https://api.openlayer.com/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('OPENLAYER_BASE_URL'), apiKey = Core.readEnv('OPENLAYER_API_KEY') ?? null, ...opts } = {}) {
        const options = {
            apiKey,
            ...opts,
            baseURL: baseURL || `https://api.openlayer.com/v1`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.projects = new API.Projects(this);
        this.commits = new API.Commits(this);
        this.inferencePipelines = new API.InferencePipelines(this);
        this.storage = new API.Storage(this);
        this._options = options;
        this.apiKey = apiKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    validateHeaders(headers, customHeaders) {
        if (this.apiKey && headers['authorization']) {
            return;
        }
        if (customHeaders['authorization'] === null) {
            return;
        }
        throw new Error('Could not resolve authentication method. Expected the apiKey to be set. Or for the "Authorization" headers to be explicitly omitted');
    }
    authHeaders(opts) {
        if (this.apiKey == null) {
            return {};
        }
        return { Authorization: `Bearer ${this.apiKey}` };
    }
    stringifyQuery(query) {
        return qs.stringify(query, { arrayFormat: 'comma' });
    }
}
_a = Openlayer;
Openlayer.Openlayer = _a;
Openlayer.DEFAULT_TIMEOUT = 60000; // 1 minute
Openlayer.OpenlayerError = Errors.OpenlayerError;
Openlayer.APIError = Errors.APIError;
Openlayer.APIConnectionError = Errors.APIConnectionError;
Openlayer.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Openlayer.APIUserAbortError = Errors.APIUserAbortError;
Openlayer.NotFoundError = Errors.NotFoundError;
Openlayer.ConflictError = Errors.ConflictError;
Openlayer.RateLimitError = Errors.RateLimitError;
Openlayer.BadRequestError = Errors.BadRequestError;
Openlayer.AuthenticationError = Errors.AuthenticationError;
Openlayer.InternalServerError = Errors.InternalServerError;
Openlayer.PermissionDeniedError = Errors.PermissionDeniedError;
Openlayer.UnprocessableEntityError = Errors.UnprocessableEntityError;
Openlayer.toFile = Uploads.toFile;
Openlayer.fileFromPath = Uploads.fileFromPath;
Openlayer.Projects = Projects;
Openlayer.Commits = Commits;
Openlayer.InferencePipelines = InferencePipelines;
Openlayer.Storage = Storage;
export { toFile, fileFromPath } from "./uploads.mjs";
export { OpenlayerError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default Openlayer;
//# sourceMappingURL=index.mjs.map