import { APIResource } from "../../resource.js";
import * as Core from "../../core.js";
export declare class Rows extends APIResource {
    /**
     * Update an inference data point in an inference pipeline.
     */
    update(inferencePipelineId: string, params: RowUpdateParams, options?: Core.RequestOptions): Core.APIPromise<RowUpdateResponse>;
}
export interface RowUpdateResponse {
    success: true;
}
export interface RowUpdateParams {
    /**
     * Query param: Specify the inference id as a query param.
     */
    inferenceId: string;
    /**
     * Body param:
     */
    row: unknown;
    /**
     * Body param:
     */
    config?: RowUpdateParams.Config | null;
}
export declare namespace RowUpdateParams {
    interface Config {
        /**
         * Name of the column with the ground truths.
         */
        groundTruthColumnName?: string | null;
        /**
         * Name of the column with human feedback.
         */
        humanFeedbackColumnName?: string | null;
        /**
         * Name of the column with the inference ids. This is useful if you want to update
         * rows at a later point in time. If not provided, a unique id is generated by
         * Openlayer.
         */
        inferenceIdColumnName?: string | null;
        /**
         * Name of the column with the latencies.
         */
        latencyColumnName?: string | null;
        /**
         * Name of the column with the timestamps. Timestamps must be in UNIX sec format.
         * If not provided, the upload timestamp is used.
         */
        timestampColumnName?: string | null;
    }
}
export declare namespace Rows {
    export { type RowUpdateResponse as RowUpdateResponse, type RowUpdateParams as RowUpdateParams };
}
//# sourceMappingURL=rows.d.ts.map