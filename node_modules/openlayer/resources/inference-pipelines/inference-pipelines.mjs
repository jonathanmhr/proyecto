// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../resource.mjs";
import { isRequestOptions } from "../../core.mjs";
import * as DataAPI from "./data.mjs";
import { Data } from "./data.mjs";
import * as RowsAPI from "./rows.mjs";
import { Rows } from "./rows.mjs";
import * as TestResultsAPI from "./test-results.mjs";
import { TestResults } from "./test-results.mjs";
export class InferencePipelines extends APIResource {
    constructor() {
        super(...arguments);
        this.data = new DataAPI.Data(this._client);
        this.rows = new RowsAPI.Rows(this._client);
        this.testResults = new TestResultsAPI.TestResults(this._client);
    }
    retrieve(inferencePipelineId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.retrieve(inferencePipelineId, {}, query);
        }
        return this._client.get(`/inference-pipelines/${inferencePipelineId}`, { query, ...options });
    }
    update(inferencePipelineId, body = {}, options) {
        if (isRequestOptions(body)) {
            return this.update(inferencePipelineId, {}, body);
        }
        return this._client.put(`/inference-pipelines/${inferencePipelineId}`, { body, ...options });
    }
    /**
     * Delete inference pipeline.
     */
    delete(inferencePipelineId, options) {
        return this._client.delete(`/inference-pipelines/${inferencePipelineId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
}
InferencePipelines.Data = Data;
InferencePipelines.Rows = Rows;
InferencePipelines.TestResults = TestResults;
//# sourceMappingURL=inference-pipelines.mjs.map