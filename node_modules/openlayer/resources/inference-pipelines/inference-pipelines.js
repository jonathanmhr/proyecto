"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferencePipelines = void 0;
const resource_1 = require("../../resource.js");
const core_1 = require("../../core.js");
const DataAPI = __importStar(require("./data.js"));
const data_1 = require("./data.js");
const RowsAPI = __importStar(require("./rows.js"));
const rows_1 = require("./rows.js");
const TestResultsAPI = __importStar(require("./test-results.js"));
const test_results_1 = require("./test-results.js");
class InferencePipelines extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.data = new DataAPI.Data(this._client);
        this.rows = new RowsAPI.Rows(this._client);
        this.testResults = new TestResultsAPI.TestResults(this._client);
    }
    retrieve(inferencePipelineId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.retrieve(inferencePipelineId, {}, query);
        }
        return this._client.get(`/inference-pipelines/${inferencePipelineId}`, { query, ...options });
    }
    update(inferencePipelineId, body = {}, options) {
        if ((0, core_1.isRequestOptions)(body)) {
            return this.update(inferencePipelineId, {}, body);
        }
        return this._client.put(`/inference-pipelines/${inferencePipelineId}`, { body, ...options });
    }
    /**
     * Delete inference pipeline.
     */
    delete(inferencePipelineId, options) {
        return this._client.delete(`/inference-pipelines/${inferencePipelineId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
}
exports.InferencePipelines = InferencePipelines;
InferencePipelines.Data = data_1.Data;
InferencePipelines.Rows = rows_1.Rows;
InferencePipelines.TestResults = test_results_1.TestResults;
//# sourceMappingURL=inference-pipelines.js.map