import { StepType } from "./enums.js";
export interface StepData {
    name: string;
    id: string;
    type: StepType;
    inputs: any;
    output: any;
    groundTruth: any;
    metadata: Record<string, any>;
    steps: StepData[];
    latency: number | null;
    startTime: number;
    endTime: number | null;
}
export interface ChatCompletionStepData extends StepData {
    provider: string | null;
    promptTokens: number | null;
    completionTokens: number | null;
    tokens: number | null;
    cost: number | null;
    model: string | null;
    modelParameters: Record<string, any> | null;
    rawOutput: string | null;
}
export declare class Step {
    name: string;
    id: string;
    inputs: any;
    output: any;
    metadata: Record<string, any>;
    stepType: StepType | null;
    startTime: number;
    endTime: number | null;
    groundTruth: any;
    latency: number | null;
    steps: Step[];
    constructor(name: string, inputs?: any, output?: any, metadata?: Record<string, any>);
    addNestedStep(nestedStep: Step): void;
    log(data: Partial<Record<keyof this, any>>): void;
    toJSON(): StepData;
}
export declare class UserCallStep extends Step {
    constructor(name: string, inputs?: any, output?: any, metadata?: Record<string, any>);
}
export declare class ChatCompletionStep extends Step {
    provider: string | null;
    promptTokens: number | null;
    completionTokens: number | null;
    tokens: number | null;
    cost: number | null;
    model: string | null;
    modelParameters: Record<string, any> | null;
    rawOutput: string | null;
    constructor(name: string, inputs?: any, output?: any, metadata?: Record<string, any>);
    toJSON(): ChatCompletionStepData;
}
//# sourceMappingURL=steps.d.ts.map