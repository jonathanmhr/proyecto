"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatCompletionStep = exports.UserCallStep = exports.Step = void 0;
const uuid_1 = require("uuid");
const enums_1 = require("./enums.js");
class Step {
    constructor(name, inputs = null, output = null, metadata = {}) {
        this.stepType = null;
        this.endTime = null;
        this.groundTruth = null;
        this.latency = null;
        this.steps = [];
        this.name = name;
        this.id = (0, uuid_1.v4)();
        this.inputs = inputs;
        this.output = output;
        this.metadata = metadata;
        this.startTime = Date.now();
    }
    addNestedStep(nestedStep) {
        this.steps.push(nestedStep);
    }
    log(data) {
        Object.keys(data).forEach((key) => {
            if (key in this) {
                // @ts-ignore
                this[key] = data[key];
            }
        });
    }
    toJSON() {
        return {
            name: this.name,
            id: this.id,
            type: this.stepType,
            inputs: this.inputs,
            output: this.output,
            groundTruth: this.groundTruth,
            metadata: this.metadata,
            steps: this.steps.map((nestedStep) => nestedStep.toJSON()),
            latency: this.latency,
            startTime: this.startTime,
            endTime: this.endTime,
        };
    }
}
exports.Step = Step;
class UserCallStep extends Step {
    constructor(name, inputs = null, output = null, metadata = {}) {
        super(name, inputs, output, metadata);
        this.stepType = enums_1.StepType.USER_CALL;
    }
}
exports.UserCallStep = UserCallStep;
class ChatCompletionStep extends Step {
    constructor(name, inputs = null, output = null, metadata = {}) {
        super(name, inputs, output, metadata);
        this.provider = null;
        this.promptTokens = null;
        this.completionTokens = null;
        this.tokens = null;
        this.cost = null;
        this.model = null;
        this.modelParameters = null;
        this.rawOutput = null;
        this.stepType = enums_1.StepType.CHAT_COMPLETION;
    }
    toJSON() {
        const stepData = super.toJSON();
        return {
            ...stepData,
            provider: this.provider,
            promptTokens: this.promptTokens,
            completionTokens: this.completionTokens,
            tokens: this.tokens,
            cost: this.cost,
            model: this.model,
            modelParameters: this.modelParameters,
            rawOutput: this.rawOutput,
        };
    }
}
exports.ChatCompletionStep = ChatCompletionStep;
//# sourceMappingURL=steps.js.map