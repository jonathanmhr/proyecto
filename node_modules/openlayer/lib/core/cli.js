"use strict";
/*
 * Description: This file contains the CLIHandler class which is responsible
 * For handling the CLI input and output.
 *
 * Example Usage:
 * // Initialize CLI handler with the user's model run method
 * const cliHandler = new CLIHandler(model.run.bind(model));
 *
 * // Setup CLI and process dataset
 * cliHandler.runFromCLI();
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class CLIHandler {
    constructor(runFunction) {
        this.run = runFunction;
    }
    runFromCLI() {
        commander_1.program
            .requiredOption('--dataset-path <path>', 'Path to the dataset')
            .requiredOption('--output-dir <path>', 'Directory to place results');
        commander_1.program.parse(process.argv);
        const options = commander_1.program.opts();
        const { datasetPath, outputDir } = options;
        // Load dataset
        const datasetFullPath = path.resolve(datasetPath);
        const rawData = fs.readFileSync(datasetFullPath, 'utf8');
        const dataset = JSON.parse(rawData);
        // Process each item in the dataset dynamically
        Promise.all(dataset.map(async (item) => {
            const result = await this.run(item);
            // Merge the original item fields with the result
            return { ...item, ...result.otherFields, output: result.output };
        }))
            .then((results) => {
            /*
             * Wait for all rows to be run
             * Write results now to output dir or log to console
             */
            this.writeOutput(results, outputDir);
            console.log('Results processing completed. Check console for output.');
        })
            .catch((err) => {
            console.error(`Error processing dataset: ${err}`);
        });
    }
    writeOutput(results, outputDir) {
        const config = {
            metadata: { outputTimestamp: Date.now() },
            outputColumnName: 'output',
        };
        // Construct an output directory {outputDir}/{datasetName}/
        const outputDirPath = path.resolve(outputDir);
        fs.mkdirSync(outputDirPath, { recursive: true });
        const datasetPath = path.join(outputDirPath, 'dataset.json');
        const configPath = path.join(outputDirPath, 'config.json');
        fs.writeFileSync(datasetPath, JSON.stringify(results, null, 4), 'utf8');
        fs.writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
        console.info(`Output written to ${datasetPath}`);
        console.info(`Config written to ${configPath}`);
    }
}
exports.default = CLIHandler;
//# sourceMappingURL=cli.js.map