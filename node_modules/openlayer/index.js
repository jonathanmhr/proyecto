"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnprocessableEntityError = exports.PermissionDeniedError = exports.InternalServerError = exports.AuthenticationError = exports.BadRequestError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.APIUserAbortError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIError = exports.OpenlayerError = exports.fileFromPath = exports.toFile = exports.Openlayer = void 0;
const qs = __importStar(require("./internal/qs/index.js"));
const Core = __importStar(require("./core.js"));
const Errors = __importStar(require("./error.js"));
const Uploads = __importStar(require("./uploads.js"));
const API = __importStar(require("./resources/index.js"));
const commits_1 = require("./resources/commits/commits.js");
const inference_pipelines_1 = require("./resources/inference-pipelines/inference-pipelines.js");
const projects_1 = require("./resources/projects/projects.js");
const storage_1 = require("./resources/storage/storage.js");
/**
 * API Client for interfacing with the Openlayer API.
 */
class Openlayer extends Core.APIClient {
    /**
     * API Client for interfacing with the Openlayer API.
     *
     * @param {string | null | undefined} [opts.apiKey=process.env['OPENLAYER_API_KEY'] ?? null]
     * @param {string} [opts.baseURL=process.env['OPENLAYER_BASE_URL'] ?? https://api.openlayer.com/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('OPENLAYER_BASE_URL'), apiKey = Core.readEnv('OPENLAYER_API_KEY') ?? null, ...opts } = {}) {
        const options = {
            apiKey,
            ...opts,
            baseURL: baseURL || `https://api.openlayer.com/v1`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.projects = new API.Projects(this);
        this.commits = new API.Commits(this);
        this.inferencePipelines = new API.InferencePipelines(this);
        this.storage = new API.Storage(this);
        this._options = options;
        this.apiKey = apiKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    validateHeaders(headers, customHeaders) {
        if (this.apiKey && headers['authorization']) {
            return;
        }
        if (customHeaders['authorization'] === null) {
            return;
        }
        throw new Error('Could not resolve authentication method. Expected the apiKey to be set. Or for the "Authorization" headers to be explicitly omitted');
    }
    authHeaders(opts) {
        if (this.apiKey == null) {
            return {};
        }
        return { Authorization: `Bearer ${this.apiKey}` };
    }
    stringifyQuery(query) {
        return qs.stringify(query, { arrayFormat: 'comma' });
    }
}
exports.Openlayer = Openlayer;
_a = Openlayer;
Openlayer.Openlayer = _a;
Openlayer.DEFAULT_TIMEOUT = 60000; // 1 minute
Openlayer.OpenlayerError = Errors.OpenlayerError;
Openlayer.APIError = Errors.APIError;
Openlayer.APIConnectionError = Errors.APIConnectionError;
Openlayer.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Openlayer.APIUserAbortError = Errors.APIUserAbortError;
Openlayer.NotFoundError = Errors.NotFoundError;
Openlayer.ConflictError = Errors.ConflictError;
Openlayer.RateLimitError = Errors.RateLimitError;
Openlayer.BadRequestError = Errors.BadRequestError;
Openlayer.AuthenticationError = Errors.AuthenticationError;
Openlayer.InternalServerError = Errors.InternalServerError;
Openlayer.PermissionDeniedError = Errors.PermissionDeniedError;
Openlayer.UnprocessableEntityError = Errors.UnprocessableEntityError;
Openlayer.toFile = Uploads.toFile;
Openlayer.fileFromPath = Uploads.fileFromPath;
Openlayer.Projects = projects_1.Projects;
Openlayer.Commits = commits_1.Commits;
Openlayer.InferencePipelines = inference_pipelines_1.InferencePipelines;
Openlayer.Storage = storage_1.Storage;
var uploads_1 = require("./uploads.js");
Object.defineProperty(exports, "toFile", { enumerable: true, get: function () { return uploads_1.toFile; } });
Object.defineProperty(exports, "fileFromPath", { enumerable: true, get: function () { return uploads_1.fileFromPath; } });
var error_1 = require("./error.js");
Object.defineProperty(exports, "OpenlayerError", { enumerable: true, get: function () { return error_1.OpenlayerError; } });
Object.defineProperty(exports, "APIError", { enumerable: true, get: function () { return error_1.APIError; } });
Object.defineProperty(exports, "APIConnectionError", { enumerable: true, get: function () { return error_1.APIConnectionError; } });
Object.defineProperty(exports, "APIConnectionTimeoutError", { enumerable: true, get: function () { return error_1.APIConnectionTimeoutError; } });
Object.defineProperty(exports, "APIUserAbortError", { enumerable: true, get: function () { return error_1.APIUserAbortError; } });
Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function () { return error_1.NotFoundError; } });
Object.defineProperty(exports, "ConflictError", { enumerable: true, get: function () { return error_1.ConflictError; } });
Object.defineProperty(exports, "RateLimitError", { enumerable: true, get: function () { return error_1.RateLimitError; } });
Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function () { return error_1.BadRequestError; } });
Object.defineProperty(exports, "AuthenticationError", { enumerable: true, get: function () { return error_1.AuthenticationError; } });
Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function () { return error_1.InternalServerError; } });
Object.defineProperty(exports, "PermissionDeniedError", { enumerable: true, get: function () { return error_1.PermissionDeniedError; } });
Object.defineProperty(exports, "UnprocessableEntityError", { enumerable: true, get: function () { return error_1.UnprocessableEntityError; } });
exports = module.exports = Openlayer;
exports.default = Openlayer;
//# sourceMappingURL=index.js.map